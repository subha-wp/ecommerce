generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id
  username      String    @unique
  displayName   String
  email         String?   @unique
  passwordHash  String?
  googleId      String?   @unique
  avatarUrl     String?
  bio           String?
  sessions      Session[]
  orders        Order[]
  favorites     Favorite[]
  addresses     Address[]
  createdAt     DateTime  @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  minPrice    Float
  sizes       String[]
  images      ProductImage[]
  category    String
  subcategory String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favorites   Favorite[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  items         OrderItem[]
  addressId     String
  address       Address    @relation(fields: [addressId], references: [id])
  status        String     @default("pending")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Address {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  name          String
  phoneNumber   String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  country       String
  zipCode       String
  isDefault     Boolean  @default(false)
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, addressLine1, addressLine2, city, state, country, zipCode])
}