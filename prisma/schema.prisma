generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id
  username      String    @unique
  displayName   String
  email         String?   @unique
  passwordHash  String?
  googleId      String?   @unique
  avatarUrl     String?
  bio           String?
  sessions      Session[]
  orders        Order[]
  favorites     Favorite[]
  addresses     Address[]
  createdAt     DateTime  @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  image         String?
  subcategories Subcategory[]
  products      Product[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subcategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([categoryId, name])
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  minPrice    Float
  sizes       String[]
  images      ProductImage[]
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  isFeatured  Boolean  @default(false)
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favorites   Favorite[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id            String   @id @default(cuid())
  code          String   @unique
  discountType  String   // 'percentage' or 'fixed'
  discountValue Float
  minOrderValue Float?
  maxDiscount   Float?
  expiryDate    DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  addressId      String
  address        Address  @relation(fields: [addressId], references: [id])
  items          OrderItem[]
  totalAmount    Float?
  paymentMode    String?
  status         String   @default("pending")
  appliedCoupon  String?
  paymentId      String?
  discountAmount Float    @default(0)
  deliveryCharge Float    @default(15)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Address {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  name          String
  phoneNumber   String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  country       String
  zipCode       String
  isDefault     Boolean  @default(false)
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, addressLine1, addressLine2, city, state, country, zipCode])
}